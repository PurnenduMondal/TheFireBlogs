{"version":3,"sources":["components/ItemList.jsx","components/myidb.js"],"names":["SwiperCore","use","Navigation","Pagination","Scrollbar","A11y","ItemList","props","items","plugin","id","beforeDraw","chart","ctx","canvas","getContext","save","globalCompositeOperation","fillStyle","fillRect","width","height","restore","data","item","labels","damage","rate_of_fire","range","reload_speed","magazine","accuracy","movement_speed","datasets","fill","borderColor","backgroundColor","borderWidth","pointRadius","options","plugins","legend","display","layout","padding","scales","r","grid","lineWidth","color","circular","ticks","textStrokeWidth","pointLabels","font","size","weight","angleLines","aspectRatio","attnames","spaceBetween","slidesPerView","onSlideChange","console","log","onSwiper","swiper","pagination","clickable","map","index","style","textAlign","src","imgurl","className","alt","name","description","silencer","muzzle","foregrip","magurl","scope","stock","i","j","toUpperCase","dbPromise","openDB","upgrade","db","createObjectStore","get","key","a","set","val","put"],"mappings":"iGAAA,yIAaAA,IAAWC,IAAI,CAACC,IAAYC,IAAYC,IAAWC,MAoJpCC,UAlJf,SAAkBC,GAEhB,IAAMC,EAAQD,EAAMC,MA0BRC,EAAS,CACbC,GAAI,iCACJC,WAAY,SAACC,GACX,IAAMC,EAAMD,EAAME,OAAOC,WAAW,MACpCF,EAAIG,OACJH,EAAII,yBAA2B,mBAC/BJ,EAAIK,UAAY,QAChBL,EAAIM,SAAS,EAAG,EAAGP,EAAMQ,MAAOR,EAAMS,QACtCR,EAAIS,YAGR,SAASC,EAAKC,GAIZ,MAAM,CACFC,OAAQ,CACN,UAAUD,EAAKE,OACf,gBAAgBF,EAAKG,aACrB,SAASH,EAAKI,MACd,gBAAgBJ,EAAKK,aACrB,YAAYL,EAAKM,SACjB,YAAYN,EAAKO,SACjB,kBAAkBP,EAAKQ,gBAGzBC,SAAU,CAAC,CACTV,KAAM,CAACC,EAAKE,OAAQF,EAAKG,aAAcH,EAAKI,MAAOJ,EAAKK,aAAcL,EAAKM,SAAUN,EAAKO,SAASP,EAAKQ,gBACxGE,MAAM,EACNC,YAAa,qBACbC,gBAAiB,wBACjBC,YAAa,IACbC,YAAa,KAInB,IAAMC,EAAU,CACdC,QAAS,CACPC,OAAQ,CACNC,SAAS,IAGbC,OAAQ,CAACC,QAAQ,GACjBC,OAAQ,CACNC,EAAE,CACAC,KAAK,CACHV,YAAY,EACZW,UAAU,IACVC,MAAM,oBACNC,UAAS,GAEXd,gBAAgB,qBAChBe,MAAM,CACJC,gBAAgB,EAChBV,SAAS,GAEXW,YAAY,CACRC,KAAM,CACJC,KAAM,GACNC,OAAO,QAGXP,MAAM,oBAERQ,WAAY,CACVR,MAAO,uBAIbS,YAAY,GAGRC,EAAW,CAAC,WAAY,SAAU,WAAW,WAAW,QAAQ,SAC5E,OACI,8BAIA,cAAC,IAAD,CACAC,aAAc,EACdC,cAAe,EACfC,cAAe,kBAAMC,QAAQC,IAAI,iBACjCC,SAAU,SAACC,GAAD,OAAYH,QAAQC,IAAIE,IAClCC,WAAY,CAAEC,WAAW,GALzB,SAQC5D,EAAM6D,KAAI,SAAC7C,EAAM8C,GAAP,OAEP,8BACA,eAAC,IAAD,CAA2BC,MAAO,CAACtB,MAAM,mBAAmBuB,UAAW,UAAvE,UACI,qBAAKC,IAAOjD,EAAKkD,OAAQC,UAAU,YAAYC,IAAI,qBACnD,6BACKpD,EAAKqD,OAEV,4BAAIrD,EAAKsD,cACT,cAAC,IAAD,CAAOvD,KAAMA,EAAKC,GAAOe,QAASA,EAASC,QAAW,CAAC/B,GAASwC,MAAQ,SACxE,qBAAK0B,UAAY,cAAjB,SACA,6BACG,CAACnD,EAAKuD,SAASvD,EAAKwD,OAAOxD,EAAKyD,SAASzD,EAAK0D,OAAO1D,EAAK2D,MAAM3D,EAAK4D,OACrEf,KAAI,SAACgB,EAAEC,GAAH,OACH,+BACA,qBAAKb,IAAKY,IACV,4BAAI1B,EAAS2B,GAAGC,4BAbJjB,c,yIClI1BkB,EAAYC,YAAO,eAAgB,EAAG,CAC1CC,QAD0C,SAClCC,GACNA,EAAGC,kBAAkB,aAIlB,SAAeC,EAAtB,kC,4CAAO,WAAmBC,GAAnB,SAAAC,EAAA,sEACSP,EADT,uCACoBK,IAAI,SAAUC,IADlC,4C,sBAGA,SAAeE,EAAtB,oC,4CAAO,WAAmBF,EAAKG,GAAxB,SAAAF,EAAA,sEACSP,EADT,uCACoBU,IAAI,SAAUD,EAAKH,IADvC,4C","file":"static/js/3.2f66e0b8.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {} from \"react-router-dom\";\r\nimport { set, get } from './myidb';\r\nimport { openDB } from 'idb';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport 'swiper/swiper.scss';\r\nimport 'swiper/components/navigation/navigation.scss';\r\nimport 'swiper/components/pagination/pagination.scss';\r\nimport 'swiper/components/scrollbar/scrollbar.scss';\r\nimport {Radar}  from 'react-chartjs-2';\r\nimport SwiperCore, { Navigation, Pagination, Scrollbar, A11y } from 'swiper';\r\n\r\nSwiperCore.use([Navigation, Pagination, Scrollbar, A11y]);\r\n\r\nfunction ItemList(props)\r\n{\r\n  const items = props.items;\r\n    // const [items, setItems] = useState([]);\r\n    // const {id} = useParams();\r\n\r\n    // React.useEffect(() => {\r\n    //     axios.post('https://ffggserver.vercel.app/iteminfo', {catname : id})\r\n    //     .then(res => { \r\n    //       //\r\n    //       setItems(res.data);\r\n    //       // openDB(id, 1, {\r\n    //       //   upgrade(db) {\r\n    //       //     const dbPromise = db.createObjectStore(id);\r\n    //       //     dbPromise.put(id,JSON.stringify(res.data),id)\r\n    //       //   },\r\n    //       // });\r\n    //       set(id,JSON.stringify(res.data));\r\n\r\n    //     }).catch(err =>{\r\n    //       get(id).then((data) => {\r\n    //         var x = JSON.parse(data)\r\n    //         setItems(x)\r\n    //       });\r\n    //       //setItems(get(id));\r\n    //     })\r\n\r\n    //     }, []);\r\n        const plugin = {\r\n          id: 'custom_canvas_background_color',\r\n          beforeDraw: (chart) => {\r\n            const ctx = chart.canvas.getContext('2d');\r\n            ctx.save();\r\n            ctx.globalCompositeOperation = 'destination-over';\r\n            ctx.fillStyle = 'white';\r\n            ctx.fillRect(0, 0, chart.width, chart.height);\r\n            ctx.restore();\r\n          }\r\n        };\r\n        function data(item) {\r\n          // var ctx = canvas.getContext(\"2d\");\r\n          // const gradient = ctx.createLinearGradient(0,0,100,0);\r\n          // ctx.lineWidth = 100;\r\n          return{  \r\n              labels: [\r\n                'DAMAGE '+item.damage,\r\n                'RATE OF FIRE '+item.rate_of_fire,\r\n                'RANGE '+item.range,\r\n                'RELOAD SPEED '+item.reload_speed,\r\n                'MAGAZINE '+item.magazine,\r\n                'ACCURACY '+item.accuracy,\r\n                'MOVEMENT SPEED '+item.movement_speed,\r\n              ],\r\n              \r\n              datasets: [{\r\n                data: [item.damage, item.rate_of_fire, item.range, item.reload_speed, item.magazine, item.accuracy,item.movement_speed],\r\n                fill: true,\r\n                borderColor: 'rgba(80, 203, 147)',\r\n                backgroundColor: 'rgba(80, 203, 147,.5)',\r\n                borderWidth: 1.5,\r\n                pointRadius: 1\r\n              }]\r\n            };\r\n          };\r\n          const options = {\r\n            plugins: {\r\n              legend: {\r\n                display: false\r\n              }\r\n            },\r\n            layout: {padding:0},\r\n            scales: {\r\n              r:{\r\n                grid:{\r\n                  borderWidth:3,\r\n                  lineWidth:1.5,\r\n                  color:\"rgb(80, 203, 147)\",\r\n                  circular:false\r\n                },\r\n                backgroundColor:\"rgb(172, 255, 173)\",\r\n                ticks:{\r\n                  textStrokeWidth:2,\r\n                  display: false\r\n                },\r\n                pointLabels:{\r\n                    font: {\r\n                      size: 11,\r\n                      weight:\"bold\",\r\n                      \r\n                  },\r\n                  color:\"rgb(84, 67, 107)\"\r\n                },\r\n                angleLines: {\r\n                  color: \"rgb(80, 203, 147)\"\r\n                }\r\n              }\r\n            },\r\n            aspectRatio:2\r\n          };\r\n    \r\n          const attnames = [\"silencer\", \"muzzle\", \"foregrip\",\"magazine\",\"scope\",\"stock\"]\r\n    return (\r\n        <div>\r\n        {/* <Link to=\"/\">\r\n            <h1>Go Back </h1>\r\n        </Link> */}\r\n        <Swiper\r\n        spaceBetween={0}\r\n        slidesPerView={1}\r\n        onSlideChange={() => console.log('slide change')}\r\n        onSwiper={(swiper) => console.log(swiper)}\r\n        pagination={{ clickable: true }}\r\n        // scrollbar={{ draggable: true }}\r\n        >\r\n        {items.map((item, index) => \r\n            (\r\n            <div>\r\n            <SwiperSlide key = {index} style={{color:\"rgb(84, 67, 107)\",textAlign: \"center\"}} >\r\n                <img src = {item.imgurl} className=\"img-fluid\" alt=\"Responsive image\"/>\r\n                <h1 >\r\n                    {item.name}\r\n                </h1>\r\n                <p>{item.description}</p>\r\n                <Radar data={data(item)} options={options} plugins = {[plugin]} color ={\"blue\"}/>\r\n                <div className = \"attachables\">\r\n                <ul>\r\n                  {[item.silencer,item.muzzle,item.foregrip,item.magurl,item.scope,item.stock]\r\n                  .map((i,j) => (\r\n                    <li >\r\n                    <img src={i}/>\r\n                    <p>{attnames[j].toUpperCase() }</p>\r\n                    </li>\r\n                  ))\r\n                  }\r\n                </ul>\r\n                </div>\r\n            </SwiperSlide>        \r\n                       \r\n        \r\n            </div>\r\n            )\r\n        )}       \r\n        </Swiper>\r\n        </div>\r\n    );\r\n}\r\nexport default ItemList;\r\n\r\n","import { openDB } from 'idb';\r\n\r\nconst dbPromise = openDB('keyval-store', 1, {\r\n  upgrade(db) {\r\n    db.createObjectStore('keyval');\r\n  },\r\n});\r\n\r\nexport async function get(key) {\r\n  return (await dbPromise).get('keyval', key);\r\n}\r\nexport async function set(key, val) {\r\n  return (await dbPromise).put('keyval', val, key);\r\n}\r\nexport async function del(key) {\r\n  return (await dbPromise).delete('keyval', key);\r\n}\r\nexport async function clear() {\r\n  return (await dbPromise).clear('keyval');\r\n}\r\nexport async function keys() {\r\n  return (await dbPromise).getAllKeys('keyval');\r\n}"],"sourceRoot":""}
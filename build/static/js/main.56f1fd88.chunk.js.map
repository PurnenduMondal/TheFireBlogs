{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","components/App.jsx","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Landing","lazy","AR","LAUNCHER","LMG","MELEE","PISTOL","SG","SMG","SR","CreatePost","Blogs","BlogPost","App","fallback","className","role","path","exact","component","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.56f1fd88.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {  lazy, Suspense } from \"react\";\nimport {} from \"react-router-dom\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst Landing = lazy(() => import(\"./Landing\"));\n//const ItemList = lazy(() => import(\"./ItemList\"));\nconst AR = lazy(() => import(\"./AR\"))\nconst LAUNCHER = lazy(() => import(\"./LAUNCHER\"))\nconst LMG = lazy(() => import(\"./LMG\"))\nconst MELEE = lazy(() => import(\"./MELEE\"))\nconst PISTOL = lazy(() => import(\"./PISTOL\"))\nconst SG = lazy(() => import(\"./SG\"))\nconst SMG = lazy(() => import(\"./SMG\"))\nconst SR = lazy(() => import(\"./SR\"))\nconst CreatePost = lazy(() => import(\"./CreatePost\"))\nconst Blogs = lazy(() => import(\"./Blogs\"))\nconst BlogPost = lazy(() => import(\"./BlogPost\"))\n\nfunction App() {\n  \n  const renderLoader = () => (\n    <div className=\"spinner-container\">\n        <div className=\"spinner-border text-warning\" role=\"status\">\n            <span className=\"sr-only\"></span>\n        </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <Router>\n      <Suspense fallback={renderLoader()}>\n        <Switch>\n          <Route path=\"/\" exact component= {Landing}/>\n          <Route path=\"/AR\" exact component= {AR}/>\n          <Route path=\"/LAUNCHER\" exact component= {LAUNCHER}/>\n          <Route path=\"/LMG\" exact component= {LMG}/>\n          <Route path=\"/MELEE\" exact component= {MELEE}/>\n          <Route path=\"/PISTOL\" exact component= {PISTOL}/>\n          <Route path=\"/SG\" exact component= {SG}/>\n          <Route path=\"/SMG\" exact component= {SMG}/>\n          <Route path=\"/SR\" exact component= {SR}/>\n          <Route path=\"/createpost\" exact component= {CreatePost}/>\n          <Route path=\"/blogs\" exact component= {Blogs}/>\n          <Route path=\"/blogs/:id\" exact component={BlogPost} />\n        </Switch>\n        </Suspense>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App\";\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}